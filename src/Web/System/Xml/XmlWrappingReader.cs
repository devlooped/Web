// <auto-generated />
#region License
// MIT License
// 
// Copyright (c) Daniel Cazzulino
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#endregion

#nullable enable
using System.Threading.Tasks;

namespace System.Xml
{
    /// <summary>
    /// Base <see cref="XmlReader"/> that can be use to create new readers by 
    /// wrapping existing ones.
    /// </summary>
    /// <remarks>
    /// Supports <see cref="IXmlLineInfo"/> if the underlying reader supports it.
    /// </remarks>
    abstract partial class XmlWrappingReader : XmlReader, IXmlLineInfo
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XmlWrappingReader"/>.
        /// </summary>
        /// <param name="baseReader">The underlying reader this instance will wrap.</param>
        protected XmlWrappingReader(XmlReader baseReader) => BaseReader = baseReader;

        /// <summary>
        /// Gets or sets the underlying reader this instance is wrapping.
        /// </summary>
        protected XmlReader BaseReader { get; set; }

        /// <summary>
        /// See <see cref="XmlReader.CanReadBinaryContent"/>.
        /// </summary>
        public override bool CanReadBinaryContent => BaseReader.CanReadBinaryContent;

        /// <summary>
        /// See <see cref="XmlReader.CanReadValueChunk"/>.
        /// </summary>
        public override bool CanReadValueChunk => BaseReader.CanReadValueChunk;

        /// <summary>
        /// See <see cref="XmlReader.CanResolveEntity"/>.
        /// </summary>
        public override bool CanResolveEntity => BaseReader.CanResolveEntity;

        /// <summary>
        /// See <see cref="XmlReader.Dispose(bool)"/>.
        /// </summary>
        protected override void Dispose(bool disposing)
        {
            if (ReadState != ReadState.Closed)
                Close();

            (BaseReader as IDisposable)?.Dispose();
        }

        /// <summary>
        /// See <see cref="XmlReader.Read"/>.
        /// </summary>
        public override bool Read() => BaseReader.Read();

        /// <summary>
        /// See <see cref="XmlReader.Close"/>.
        /// </summary>
        public override void Close() => BaseReader.Close();

        /// <summary>
        /// See <see cref="XmlReader.GetAttribute(int)"/>.
        /// </summary>
        public override string GetAttribute(int i) => BaseReader.GetAttribute(i);

        /// <summary>
        /// See <see cref="XmlReader.GetAttribute(string)"/>.
        /// </summary>
        public override string? GetAttribute(string name) => BaseReader.GetAttribute(name);

        /// <summary>
        /// See <see cref="XmlReader.GetAttribute(string, string)"/>.
        /// </summary>
        public override string? GetAttribute(string localName, string? namespaceURI) => BaseReader.GetAttribute(localName, namespaceURI);

        /// <summary>
        /// See <see cref="XmlReader.LookupNamespace"/>.
        /// </summary>
        public override string? LookupNamespace(string prefix) => BaseReader.LookupNamespace(prefix);

        /// <summary>
        /// See <see cref="XmlReader.MoveToAttribute(int)"/>.
        /// </summary>
        public override void MoveToAttribute(int i) => BaseReader.MoveToAttribute(i);

        /// <summary>
        /// See <see cref="XmlReader.MoveToAttribute(string)"/>.
        /// </summary>
        public override bool MoveToAttribute(string name) => BaseReader.MoveToAttribute(name);

        /// <summary>
        /// See <see cref="XmlReader.MoveToAttribute(string, string)"/>.
        /// </summary>
        public override bool MoveToAttribute(string localName, string? namespaceURI) => BaseReader.MoveToAttribute(localName, namespaceURI);

        /// <summary>
        /// See <see cref="XmlReader.MoveToElement"/>.
        /// </summary>
        public override bool MoveToElement() => BaseReader.MoveToElement();

        /// <summary>
        /// See <see cref="XmlReader.MoveToFirstAttribute"/>.
        /// </summary>
        public override bool MoveToFirstAttribute() => BaseReader.MoveToFirstAttribute();

        /// <summary>
        /// See <see cref="XmlReader.MoveToNextAttribute"/>.
        /// </summary>
        public override bool MoveToNextAttribute() => BaseReader.MoveToNextAttribute();

        /// <summary>
        /// See <see cref="XmlReader.ReadAttributeValue"/>.
        /// </summary>
        public override bool ReadAttributeValue() => BaseReader.ReadAttributeValue();

        /// <summary>
        /// See <see cref="XmlReader.ResolveEntity"/>.
        /// </summary>
        public override void ResolveEntity() => BaseReader.ResolveEntity();

        /// <summary>
        /// See <see cref="XmlReader.AttributeCount"/>.
        /// </summary>
        public override int AttributeCount => BaseReader.AttributeCount;

        /// <summary>
        /// See <see cref="XmlReader.BaseURI"/>.
        /// </summary>
        public override string BaseURI => BaseReader.BaseURI;

        /// <summary>
        /// See <see cref="XmlReader.Depth"/>.
        /// </summary>
        public override int Depth => BaseReader.Depth;

        /// <summary>
        /// See <see cref="XmlReader.EOF"/>.
        /// </summary>
        public override bool EOF => BaseReader.EOF;

        /// <summary>
        /// See <see cref="XmlReader.HasValue"/>.
        /// </summary>
        public override bool HasValue => BaseReader.HasValue;

        /// <summary>
        /// See <see cref="XmlReader.IsDefault"/>.
        /// </summary>
        public override bool IsDefault => BaseReader.IsDefault;

        /// <summary>
        /// See <see cref="XmlReader.IsEmptyElement"/>.
        /// </summary>
        public override bool IsEmptyElement => BaseReader.IsEmptyElement;

        /// <summary>
        /// See <see cref="XmlReader.this[int]"/>.
        /// </summary>
        public override string this[int i] => BaseReader[i];

        /// <summary>
        /// See <see cref="XmlReader.this[string]"/>.
        /// </summary>
        public override string? this[string name] => BaseReader[name];

        /// <summary>
        /// See <see cref="XmlReader.this[string, string]"/>.
        /// </summary>
        public override string? this[string name, string? namespaceURI] => BaseReader[name, namespaceURI];

        /// <summary>
        /// See <see cref="XmlReader.LocalName"/>.
        /// </summary>
        public override string LocalName => BaseReader.LocalName;

        /// <summary>
        /// See <see cref="XmlReader.Name"/>.
        /// </summary>
        public override string Name => BaseReader.Name;

        /// <summary>
        /// See <see cref="XmlReader.NamespaceURI"/>.
        /// </summary>
        public override string NamespaceURI => BaseReader.NamespaceURI;

        /// <summary>
        /// See <see cref="XmlReader.NameTable"/>.
        /// </summary>
        public override XmlNameTable NameTable => BaseReader.NameTable;

        /// <summary>
        /// See <see cref="XmlReader.NodeType"/>.
        /// </summary>
        public override XmlNodeType NodeType => BaseReader.NodeType;

        /// <summary>
        /// See <see cref="XmlReader.Prefix"/>.
        /// </summary>
        public override string Prefix => BaseReader.Prefix;

        /// <summary>
        /// See <see cref="XmlReader.QuoteChar"/>.
        /// </summary>
        public override char QuoteChar => BaseReader.QuoteChar;

        /// <summary>
        /// See <see cref="XmlReader.ReadState"/>.
        /// </summary>
        public override ReadState ReadState => BaseReader.ReadState;

        /// <summary>
        /// See <see cref="XmlReader.Value"/>.
        /// </summary>
        public override string Value => BaseReader.Value;

        /// <summary>
        /// See <see cref="XmlReader.XmlLang"/>.
        /// </summary>
        public override string XmlLang => BaseReader.XmlLang;

        /// <summary>
        /// See <see cref="XmlReader.XmlSpace"/>.
        /// </summary>
        public override XmlSpace XmlSpace => BaseReader.XmlSpace;

        /// <summary>
        /// See <see cref="XmlReader.ReadValueChunk"/>.
        /// </summary>
        public override int ReadValueChunk(char[] buffer, int index, int count) => BaseReader.ReadValueChunk(buffer, index, count);

        #region IXmlLineInfo Members

        /// <summary>
        /// See <see cref="IXmlLineInfo.HasLineInfo"/>.
        /// </summary>
        public bool HasLineInfo() => BaseReader is IXmlLineInfo info && info.HasLineInfo();

        /// <summary>
        /// See <see cref="IXmlLineInfo.LineNumber"/>.
        /// </summary>
        public int LineNumber => BaseReader is IXmlLineInfo info ? info.LineNumber : 0;

        /// <summary>
        /// See <see cref="IXmlLineInfo.LinePosition"/>.
        /// </summary>
        public int LinePosition => BaseReader is IXmlLineInfo info ? info.LinePosition : 0;

        #endregion
    }
}
